
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import lexico.nodo;
import analisis.auxiliar;
import lexico.auxiliarLexico;
import java.util.LinkedList;
import lexico.errores;
import lexico.arbol;
import lexico.siguientes;
import lexico.analisisArbol;
import lexico.tablaSimbolos;
import lexico.estado;
import lexico.filaTablaAFD;
import lexico.automataL;
import lexico.mostrarDatos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\013\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\037\004\000\002\037\003\000\002" +
    "\032\003\000\002\005\006\000\002\006\006\000\002\007" +
    "\006\000\002\010\006\000\002\011\006\000\002\012\003" +
    "\000\002\012\004\000\002\031\004\000\002\031\003\000" +
    "\002\027\006\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\013\005\000\002\013\004\000\002\013" +
    "\003\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\033\004\000\002\033\003\000\002\016\005" +
    "\000\002\016\004\000\002\020\003\000\002\020\003\000" +
    "\002\017\004\000\002\017\003\000\002\021\005\000\002" +
    "\021\003\000\002\026\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\034\004\000\002\034\003" +
    "\000\002\023\007\000\002\036\003\000\002\036\003\000" +
    "\002\036\004\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\025\005\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\016\003\014\004\020\005\012\006\013\007" +
    "\011\010\016\001\002\000\016\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\026\ufffe\001\002\000\016\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\026\ufff8\001\002\000\016" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\026\ufffc\001" +
    "\002\000\004\002\163\001\002\000\016\004\020\005\012" +
    "\006\013\007\011\010\016\026\147\001\002\000\004\024" +
    "\143\001\002\000\004\024\140\001\002\000\004\024\135" +
    "\001\002\000\006\003\034\045\033\001\002\000\016\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\026\ufffb\001\002" +
    "\000\004\024\030\001\002\000\016\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\026\ufff9\001\002\000\004\024\022" +
    "\001\002\000\016\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\026\ufffa\001\002\000\004\027\024\001\002\000\006" +
    "\025\027\027\024\001\002\000\006\025\ufff5\027\ufff5\001" +
    "\002\000\006\025\ufff6\027\ufff6\001\002\000\006\025\ufff7" +
    "\027\ufff7\001\002\000\016\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\026\ufff4\001\002\000\004\027\024\001\002" +
    "\000\006\025\032\027\024\001\002\000\016\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\026\ufff0\001\002\000\020" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\025\uffef\026" +
    "\uffef\001\002\000\010\003\040\027\041\036\037\001\002" +
    "\000\016\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\026" +
    "\ufffd\001\002\000\004\023\105\001\002\000\004\023\uffe8" +
    "\001\002\000\010\003\045\014\051\015\047\001\002\000" +
    "\004\023\uffe9\001\002\000\026\003\040\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\025\uffee\026\uffee\027\041\036" +
    "\037\001\002\000\026\003\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\025\uffec\026\uffec\027\uffec\036\uffec\001" +
    "\002\000\026\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\025\uffed\026\uffed\027\uffed\036\uffed\001\002\000" +
    "\004\027\066\001\002\000\012\011\052\012\061\013\060" +
    "\027\053\001\002\000\012\011\uffd2\012\uffd2\013\uffd2\027" +
    "\uffd2\001\002\000\026\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\025\uffea\026\uffea\027\uffea\036\uffea\001" +
    "\002\000\012\011\uffd3\012\uffd3\013\uffd3\027\uffd3\001\002" +
    "\000\004\027\uffcc\001\002\000\006\022\uffcd\025\uffcd\001" +
    "\002\000\006\022\063\025\uffd0\001\002\000\004\025\065" +
    "\001\002\000\004\027\053\001\002\000\006\022\uffce\025" +
    "\uffce\001\002\000\004\027\uffca\001\002\000\004\027\uffcb" +
    "\001\002\000\006\022\063\025\uffd1\001\002\000\004\027" +
    "\053\001\002\000\006\022\uffcf\025\uffcf\001\002\000\032" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\014" +
    "\uffd5\015\uffd5\025\uffd5\026\uffd5\027\uffd5\036\uffd5\001\002" +
    "\000\004\024\070\001\002\000\032\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\014\uffd4\015\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\036\uffd4\001\002\000\004\024\071\001" +
    "\002\000\010\003\034\027\072\045\033\001\002\000\014" +
    "\003\uffc1\024\103\025\uffc1\027\uffc1\045\uffc1\001\002\000" +
    "\004\025\102\001\002\000\012\003\034\025\uffc6\027\072" +
    "\045\033\001\002\000\004\025\uffc5\001\002\000\004\025" +
    "\uffbf\001\002\000\012\003\uffc2\025\uffc2\027\uffc2\045\uffc2" +
    "\001\002\000\004\025\uffc4\001\002\000\012\003\uffc3\025" +
    "\uffc3\027\uffc3\045\uffc3\001\002\000\034\002\uffc7\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\014\uffc7\015" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\036\uffc7\001\002\000\004" +
    "\027\104\001\002\000\012\003\uffc0\025\uffc0\027\uffc0\045" +
    "\uffc0\001\002\000\022\016\112\020\106\037\107\040\110" +
    "\041\120\042\111\043\114\044\115\001\002\000\022\016" +
    "\112\020\106\037\107\040\110\041\120\042\111\043\114" +
    "\044\115\001\002\000\040\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\001\002\000" +
    "\040\016\uffe0\017\uffe0\020\uffe0\021\uffe0\025\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\001\002\000\040\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\025\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\001\002\000\022\016\112\020\106\037\107\040\110\041" +
    "\120\042\111\043\114\044\115\001\002\000\032\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\025\uffe5\035\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000\040" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\025\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\001\002\000\040\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\025\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\001" +
    "\002\000\026\016\112\020\106\025\127\035\126\037\107" +
    "\040\110\041\120\042\111\043\114\044\115\001\002\000" +
    "\040\016\uffe3\017\uffe3\020\uffe3\021\uffe3\025\uffe3\032\124" +
    "\033\123\034\122\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\001\002\000\040\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\025\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\032\016\uffe4\017\uffe4\020\uffe4\021\uffe4\025" +
    "\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\001\002\000\032\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\025\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\001\002\000\032\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\025\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\001\002\000\032\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\025\uffd8\035\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002\000\032\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\025\uffe6\035\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000" +
    "\022\016\112\020\106\037\107\040\110\041\120\042\111" +
    "\043\114\044\115\001\002\000\026\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\036\uffeb\001\002\000\032\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\025\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\001\002\000\026\016\112\017\132\020" +
    "\106\035\126\037\107\040\110\041\120\042\111\043\114" +
    "\044\115\001\002\000\040\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\025\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002\000" +
    "\026\016\112\020\106\021\134\035\126\037\107\040\110" +
    "\041\120\042\111\043\114\044\115\001\002\000\040\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\025\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\004\027\024\001\002\000\006" +
    "\025\137\027\024\001\002\000\016\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\026\ufff2\001\002\000\004\031\141" +
    "\001\002\000\004\025\142\001\002\000\016\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\026\ufff3\001\002\000\004" +
    "\030\144\001\002\000\004\025\145\001\002\000\016\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\026\ufff1\001\002" +
    "\000\016\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\026" +
    "\uffff\001\002\000\006\003\034\045\033\001\002\000\004" +
    "\026\151\001\002\000\010\003\040\027\041\036\037\001" +
    "\002\000\012\003\040\026\153\027\041\036\037\001\002" +
    "\000\010\003\045\014\051\015\047\001\002\000\012\003" +
    "\045\014\051\015\047\026\156\001\002\000\012\003\uffd6" +
    "\014\uffd6\015\uffd6\026\uffd6\001\002\000\004\027\066\001" +
    "\002\000\012\003\uffd7\014\uffd7\015\uffd7\026\uffd7\001\002" +
    "\000\006\002\000\027\066\001\002\000\006\002\uffc8\027" +
    "\uffc8\001\002\000\006\002\uffc9\027\uffc9\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\022\002\006\003\007\004\003\005\005\006" +
    "\014\007\020\010\016\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\145\005\005\006\014\007\020\010\016\011\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\024\037\022\001\001\000\004\032\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\024\037\030\001\001" +
    "\000\004\032\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\042\030\035\031\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\047\020\045\001\001\000\002\001\001\000\006\027\043" +
    "\030\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\066\001\001\000\012\017\054\021\053\022\055" +
    "\026\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\061\026\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\075\024\073\025\076\035" +
    "\074\036\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\075\025\100\035\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\115\014\112\015\116\001\001" +
    "\000\010\013\132\014\112\015\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\130" +
    "\014\112\015\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\124\015\116\001\001" +
    "\000\004\040\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\127\015\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\124\015\116" +
    "\001\001\000\002\001\001\000\006\014\124\015\116\001" +
    "\001\000\002\001\001\000\006\032\024\037\135\001\001" +
    "\000\004\032\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\147\001\001\000\002\001\001\000\010\027\042" +
    "\030\035\031\151\001\001\000\006\027\043\030\035\001" +
    "\001\000\010\016\154\020\045\033\153\001\001\000\006" +
    "\016\156\020\045\001\001\000\002\001\001\000\006\023" +
    "\160\034\157\001\001\000\002\001\001\000\004\023\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        String caracterV ="0";
        int numeroV= 0;
        int contadorNodoHoja=0;
        LinkedList<String> listaTokens = new LinkedList<>();
        LinkedList<String> listaTerminales = new LinkedList<>();
        LinkedList<String> listaNoTerminales = new LinkedList<>();
        LinkedList<errores> listaErrores = new LinkedList<>();
        LinkedList<tablaSimbolos> listaSimbolos = new LinkedList<>();

        //errores que se recuperan 
        public void syntax_error(Symbol s){
                String error ="1. ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);        
        }
    
        //errores que ya no podemos recuperar
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                String error ="2. ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);        
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserC$actions {
  private final parserC parser;

  /** Constructor */
  CUP$parserC$actions(parserC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserC$do_action_part00000000(
    int                        CUP$parserC$act_num,
    java_cup.runtime.lr_parser CUP$parserC$parser,
    java.util.Stack            CUP$parserC$stack,
    int                        CUP$parserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserC$result;

      /* select the action based on the action number */
      switch (CUP$parserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		RESULT = start_val;
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserC$parser.done_parsing();
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INFOS separador CF separador EXPRS1 separador TNTS separador GRAMATICAS 
            {
              Object RESULT =null;
		int exprs1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-4)).left;
		int exprs1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-4)).right;
		Object exprs1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-4)).value;
		//de exprs1 obtenemos la lista de los automatas
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-8)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INFOS ::= INFOS INFO 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFOS",1, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INFOS ::= INFO 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFOS",1, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INFOS ::= error CF 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFOS",1, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INFO ::= NOMBRE1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INFO ::= VERSION1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INFO ::= AUTOR1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INFO ::= LANZAMIENTO1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INFO ::= EXTENSION1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENTS ::= IDENTS IDENT 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENTS",29, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENTS ::= IDENT 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENTS",29, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENT ::= identificador 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENT",24, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOMBRE1 ::= nombre dosPuntos IDENTS puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("NOMBRE1",3, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VERSION1 ::= version dosPuntos numeroVersion puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("VERSION1",4, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AUTOR1 ::= autor dosPuntos IDENTS puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("AUTOR1",5, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LANZAMIENTO1 ::= lanzamiento dosPuntos numeroEntero puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("LANZAMIENTO1",6, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXTENSION1 ::= extension dosPuntos IDENTS puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXTENSION1",7, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CF ::= texto 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("CF",8, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CF ::= error EXPRS1 
            {
              Object RESULT =null;
		int exprs1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int exprs1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object exprs1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
        RESULT =exprs1;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("CF",8, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRS1 ::= EXPRS1 EXPRS 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		//creamos el nodo  [.]
            //agregamos exprs a la lista de automatas
            //devolvemos la lista
            
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXPRS1",23, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRS1 ::= EXPRS 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		 
            //agregamos  exprs a la lista de automatas
            //devolvemos la lista
                
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXPRS1",23, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRS ::= ID igual ERS puntoComa 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-3)).value;
		int ersleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int ersright = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object ers = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		 
        if(id1==null){
            RESULT= null;
        }else{
            //por cada expresion se crea un arbol/automata asi se reconoce el tipo de dato que se lee y el nombre del
            
                if(ers==null ){//marcar como error semantico
            
                }else{//aqui se concatena al final con simbolo de aceptacion
                    
                    nodo n11 =  (nodo)ers;
                    nodo n22 =  new nodo();
                    contadorNodoHoja=contadorNodoHoja+1;
                    n22.insertarNodoAceptacion(contadorNodoHoja);
            
                    nodo n = new nodo();
                    n.insertarNodoConcatenacion(n11, n22);

                    //enviamos dato como arbol para analizar y guardar
                    String identificador1 = (String) id1;
                    System.out.println("IDENTIFICADOR "+identificador1);
                    LinkedList<siguientes> listaSiguientes = new LinkedList<>();
                    LinkedList<filaTablaAFD> tablaAutomata = new LinkedList<>();
                    LinkedList<estado> estadosRevisados1 = new LinkedList<>();
                    LinkedList<estado> estadosSinRevisar1 = new LinkedList<>();
                    automataL automata1 = new automataL(estadosRevisados1, estadosSinRevisar1, tablaAutomata);

                    arbol a1= new arbol(n, identificador1, listaSiguientes,automata1);

                    //se analiza el arbol y se crea un automata
                    analisisArbol analisis= new analisisArbol();
                    int contador = 0;
                    analisis.analisisArbol(a1, listaSimbolos,contador);
                    mostrarDatos m = new mostrarDatos();
                    m. mostrarAutomata(a1);

                    //limpiamos lista de simbolos
                    listaSimbolos.clear();
                    contadorNodoHoja=0;
                }
        }
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXPRS",21, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-3)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRS ::= error TNT 
            {
              Object RESULT =null;
		 
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXPRS",21, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
        String identificador1 = (String) id1;
        auxiliarLexico a= new auxiliarLexico();
        boolean encontrado=a.verificarNombreEnLista(listaTokens, identificador1);
            
        //verificacion de ide del token
        if(encontrado==true){ //marcar error pues ya existe
            String tipo = "SEMANTICO";
            String token = id1.toString();
            int fila =id1left;
            int columna= id1right;
            String otro= "Error en identificador de expresion regular, ya existe";
            errores e  = new errores(tipo,fila,columna,token, otro);
            listaErrores.add(e);
           RESULT= null;

        }else{
            RESULT = id1.toString();
        }

    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ID",22, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= ignorar 
            {
              Object RESULT =null;
		int ig1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int ig1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object ig1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		 
        RESULT = ig1.toString();
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ID",22, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ERS ::= ERS barraO ER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		//creamos el nodo  [ | ] 
            nodo n11 =  (nodo) n1;
            nodo n22 =  (nodo) n2;
            nodo n = new nodo();
            n.insertarNodoO(n11,n22);

            RESULT= n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ERS",9, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERS ::= ERS ER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		//creamos el nodo  [.] 
            nodo n11 =  (nodo) n1;
            nodo n22 =  (nodo) n2;
            nodo n = new nodo();
            n.insertarNodoConcatenacion(n11,n22);

            RESULT= n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ERS",9, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ERS ::= ER 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
            RESULT= er;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ERS",9, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ER ::= EXP SIMBOLOS1 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		//creamos el nodo  [+ * ?] 
            nodo n1 =  (nodo) exp;
            nodo n = new nodo();
            switch(num){
            case 1: 
                n.insertarNodoUnoMas(n1);
                break;
            case 2:
                n.insertarNodoCeroMas(n1);
                break;
            case 3: 
                n.insertarNodoOpcion(n1);
                break;
            }
            RESULT= n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ER",10, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ER ::= EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		 
            RESULT= exp;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("ER",10, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= corcheteAbierto ERS corcheteCerrado 
            {
              Object RESULT =null;
		int ersleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int ersright = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object ers = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		
            RESULT= ers;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= parentesisAbierto ERS parentesisCerrado 
            {
              Object RESULT =null;
		int ersleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).left;
		int ersright = ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)).right;
		Object ers = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.elementAt(CUP$parserC$top-1)).value;
		
            RESULT= ers;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= letras 
            {
              Object RESULT =null;
		
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(2,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(3, caracterV);
        listaSimbolos.add(s);
        RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= numeros 
            {
              Object RESULT =null;
		
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(1,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(2, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= caracter 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
        auxiliar a = new auxiliar();
        String caracterN =a.quitarComillas(c.toString());
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(6,caracterN,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(1, caracterN);
        listaSimbolos.add(s);


        RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= nuevaLinea 
            {
              Object RESULT =null;
		
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(3,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(6, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= espacioBlanco 
            {
              Object RESULT =null;
		
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(4,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(4, caracterV);
        listaSimbolos.add(s);

       RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= tabulador 
            {
              Object RESULT =null;
		
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(5,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(5, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIMBOLOS1 ::= unoOmas 
            {
              Integer RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
            RESULT=new Integer(1);
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SIMBOLOS1",30, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIMBOLOS1 ::= muchasVeces 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
            RESULT=new Integer(2);
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SIMBOLOS1",30, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMBOLOS1 ::= opcional 
            {
              Integer RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserC$stack.peek()).value;
		
            RESULT=new Integer(3);
    
              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SIMBOLOS1",30, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TNTS ::= TNTS TNT 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TNTS",25, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TNTS ::= TNT 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TNTS",25, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TNT ::= TIPOT SIMBOLOS puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TNT",12, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TNT ::= error GRAMATICA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TNT",12, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOT ::= terminal1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TIPOT",14, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOT ::= noTerminal 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TIPOT",14, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMBOLOS ::= TIPOS IDENTIFICADORES1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",13, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIMBOLOS ::= IDENTIFICADORES1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",13, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDENTIFICADORES1 ::= IDENTIFICADORES1 coma IDENTIFICADOR1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES1",15, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IDENTIFICADORES1 ::= IDENTIFICADOR1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES1",15, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IDENTIFICADOR1 ::= identificador 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR1",20, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= entero 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= real 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= cadena1 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GRAMATICAS ::= GRAMATICAS GRAMATICA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("GRAMATICAS",26, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // GRAMATICAS ::= GRAMATICA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("GRAMATICAS",26, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // GRAMATICA ::= identificador dosPuntos dosPuntos S2 puntoComa 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("GRAMATICA",17, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-4)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // S2 ::= REGLAS 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("S2",28, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // S2 ::= SEMANTICA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("S2",28, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // S2 ::= REGLAS SEMANTICA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("S2",28, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // REGLAS ::= REGLAS REGLA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("REGLAS",18, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-1)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // REGLAS ::= REGLA 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("REGLAS",18, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REGLA ::= identificador 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("REGLA",19, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // REGLA ::= identificador dosPuntos identificador 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("REGLA",19, ((java_cup.runtime.Symbol)CUP$parserC$stack.elementAt(CUP$parserC$top-2)), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SEMANTICA ::= CF 
            {
              Object RESULT =null;

              CUP$parserC$result = parser.getSymbolFactory().newSymbol("SEMANTICA",27, ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserC$stack.peek()), RESULT);
            }
          return CUP$parserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserC$do_action(
    int                        CUP$parserC$act_num,
    java_cup.runtime.lr_parser CUP$parserC$parser,
    java.util.Stack            CUP$parserC$stack,
    int                        CUP$parserC$top)
    throws java.lang.Exception
    {
              return CUP$parserC$do_action_part00000000(
                               CUP$parserC$act_num,
                               CUP$parserC$parser,
                               CUP$parserC$stack,
                               CUP$parserC$top);
    }
}

}
