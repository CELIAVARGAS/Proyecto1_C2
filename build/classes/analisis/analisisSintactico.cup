package analisis;
import java_cup.runtime.Symbol;
import lexico.nodo;
import analisis.auxiliar;
import lexico.auxiliarLexico;
import java.util.LinkedList;
import lexico.errores;
import lexico.arbol;
import lexico.siguientes;
import lexico.analisisArbol;
import lexico.tablaSimbolos;
import lexico.estado;
import lexico.filaTablaAFD;
import lexico.automataL;
import lexico.mostrarDatos;
import analisis.infoL;
import sintactico.lenguaje;
import sintactico.tokensLeidos;
import javax.swing.JOptionPane;

parser code 
{:
        String caracterV ="0";
        int numeroV= 0;
        int contadorNodoHoja=0;
        LinkedList<String> listaTokens = new LinkedList<>();
        LinkedList<String> listaIds = new LinkedList<>();
        LinkedList<String> listaIds1 = new LinkedList<>();
        LinkedList<arbol> arboles = new LinkedList<>();
        LinkedList<errores> listaErrores = new LinkedList<>();
        LinkedList<tablaSimbolos> listaSimbolos = new LinkedList<>();
        LinkedList<infoL> infoLengs = new LinkedList<>();
        LinkedList<tokensLeidos> listaTokensLeidos = new LinkedList<>();
        String nombreL="";

        //errores que se recuperan 
        public void syntax_error(Symbol s){
                String error ="1. ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);        
            String tipo = "Sintactico";
            String token = (String) s.value;
            int fila =s.left+1;
            int columna= s.right+1;
            String otro= "Error en el simbolo ";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
        }
    
        //errores que ya no podemos recuperar
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                String error ="2. ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);        
            String tipo = "Sintactico";
            String token = (String) s.value;
            int fila =s.left+1;
            int columna= s.right+1;
            String otro= "Error en el simbolo ";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
        }

        public boolean revisarDato(infoL info){
            boolean encontrado=false;
            String columnaBuscar= info.getColumna();
            for(int i =0; i< infoLengs.size(); i++){
                String columna = infoLengs.get(i).getColumna();
                if(columna.equals(columnaBuscar)){
                    encontrado=true;
                    break;
                }else{
                    encontrado=false;        
                }
            }
            return encontrado;
        }

      public boolean revisarNombre(){
            boolean encontrado=false;
            for(int i =0; i< infoLengs.size(); i++){
                String columna = infoLengs.get(i).getColumna();
                if(columna.equals("nombre")){
                    encontrado=true;
                    break;
                }else{
                    encontrado=false;        
                }
            }
            return encontrado;
        }

        public boolean buscarIdTNT(String valor ){
            boolean encontrado=false;
            for(int i =0; i< listaIds.size(); i++){
                String columna = listaIds.get(i);
                if(columna.equals(valor)){
                    encontrado=true;
                    break;
                }else{
                    encontrado=false;        
                }
            }
            return encontrado;
        }
        
        public boolean verificarIDS(){
            boolean encontrado=false;
            for(int i =0; i< listaIds1.size(); i++){
                String valor = listaIds1.get(i);
                if(listaTokens.contains(valor)){
                    encontrado=true;
                }else{
                    System.out.println("No se encontro el id del terminal "+valor);
                    encontrado=false;        
                    break;
                }
            }
            return encontrado;
        }

    public void verifiarLenguaje(String nombre, lenguaje l) {
        //antes verificar si hay errores
        if(pantallas.PRINCIPAL.listaErroresGeneral.isEmpty()==true){//no hay errores
            for (int i = 0; i < p1_comp2.P1_COMP2.listaLeguajes.size(); i++) {
                String nombreL2 = p1_comp2.P1_COMP2.listaLeguajes.get(i).getNombreLenguaje();
                if (nombreL2.equals(nombre)) {//si coincide eliminamos el anterior               
                    p1_comp2.P1_COMP2.listaLeguajes.remove(i);
                    System.out.println("ELIMINANDO LENGUAJE ANTERIOR");
                } else {
                }
            }
            //agregamos el lenguaje ya habiendo eliminado o no el lenguaje similar cargado anterior
            p1_comp2.P1_COMP2.listaLeguajes.add(l);
            JOptionPane.showMessageDialog(null, "Se ha creado el lenguaje-> "+nombre);
        }else{
            //existen errores, no se agrega el lenguaje
            //mostrar errores
                errores error1 = new errores("Semantico", 0, 0, "-","No se agregara lenguaje, existe errores");
                pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
        }
    }
:}

terminal    
        nombre, version, autor, lanzamiento, extension, entero, real , cadena1 ,terminal1 , noTerminal , 
        corcheteAbierto , corcheteCerrado , parentesisAbierto , parentesisCerrado ,
        coma , igual , dosPuntos , puntoComa , separador , identificador , numeroEntero, numeroVersion ,
        opcional ,muchasVeces, unoOmas , barraO , ignorar , numeros , letras , nuevaLinea , 
        tabulador , espacioBlanco , caracter , texto 
;


nonterminal    
        S, INFOS, INFO, NOMBRE1, VERSION1, AUTOR1, LANZAMIENTO1, EXTENSION1, CF, ERS, ER,
        EXP,  TNT, SIMBOLOS ,TIPOT , IDENTIFICADORES1,  TIPOS, GRAMATICA, REGLAS, 
        REGLA, IDENTIFICADOR1,EXPRS, ID, EXPRS1,IDENT,TNTS, GRAMATICAS,SEMANTICA,S2,IDENTS
;

nonterminal Integer SIMBOLOS1;

start with S;

S ::= 
    INFOS:i 
    separador 
    CF 
    separador 
    EXPRS1:exprs1 
    separador
    TNTS 
    separador
    GRAMATICAS 

    {://creamos el lenguaje
        if(i==null){
        //error semantico en infos
                errores error1 = new errores("Semantico", 0, 0, "-","Los campos de la info del lenguaje no son correctos");
                pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
        }else{
            //verificar si existe el campo nombre, devolver ese dato
            boolean e= revisarNombre(); 
            if(e==true){
            //bien, se verifica el lenguaje
                LinkedList<errores> listaErrores1 = new LinkedList<>();
                lenguaje l = new lenguaje( nombreL, arboles,listaTokensLeidos, listaErrores1);
                //si la lista de lenguajes ya contiene uno con el mismo nombre entonces s elimina y se carga este.

                verifiarLenguaje(nombreL, l);

            }else{
            //error semantico, no viene campo nombre
                errores error1 = new errores("Semantico", 0, 0, "-","No existe campo-> nombre de lenguaje");
                pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
            }
        }
        
    :}
;

// ********************************************** INFORMACION LENGUAJE ********************************************** 

INFOS ::= //verificar si no se repite el dato
    INFOS:is INFO:i1 
    {:
        infoL i = (infoL) i1;
        boolean encontrado = revisarDato(i);
        if(encontrado==true){
        //error semantico
            String tipo = "Semantico";
            String token = i1.toString();
            int fila =i1left;
            int columna= i1right;
            String otro= "Error se repiten valores de la informacion del lenguaje";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

            RESULT =null;
        }else{
        //agregar a lista
            infoL is1 = (infoL) i;
            infoLengs.add(is1);
            RESULT = 1;
        }
    :}
    | INFO:i1 
    {:
        infoL i = (infoL) i1;
        boolean encontrado = revisarDato(i);
        if(encontrado==true){
            //error semantico

            String tipo = "Semantico";
            String token = i1.toString();
            int fila =i1left;
            int columna= i1right;
            String otro= "Error se repiten valores de la informacion del lenguaje";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

            RESULT =null;
        }else{
        //agregar a lista
            infoL is1 = (infoL) i;
            infoLengs.add(is1);
            RESULT = 1;
        }
    :}
    |error CF
{:
            String tipo = "Semantico";
            String token = " ";
            int fila =0;
            int columna= 0;
            String otro= "Error en la estructura de informacion de lenguaje";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
:}
;

INFO ::= 
    NOMBRE1:n 
    {:
        RESULT =n;
    :}
    | VERSION1:v
    {:
        RESULT =v;    
    :}
    | AUTOR1:a
    {:
        RESULT =a;        
    :}
    | LANZAMIENTO1:l
    {:
        RESULT =l;            
    :}
    | EXTENSION1:e
    {:
        RESULT =e;            
    :}
;

IDENTS ::= 
    IDENTS:is IDENT:i
    {:
        RESULT =is+" "+i;        
    :}
    | IDENT:i
    {:
        RESULT =i;        
    :}
;

IDENT ::= 
    identificador:i
    {:
        RESULT =i;        
    :}
;

NOMBRE1 ::=
    nombre:c dosPuntos IDENTS:i1 puntoComa
    {:
        infoL i= new infoL(c.toString(), i1.toString());
        nombreL = i1.toString();
        RESULT =i;        
    :}
;

VERSION1 ::= 
    version:c dosPuntos numeroVersion:v1 puntoComa 
    {:
        infoL i= new infoL(c.toString(), v1.toString());
        RESULT =i;        
    :}
;

AUTOR1 ::=
    autor:c dosPuntos IDENTS:i1 puntoComa
    {:
        infoL i= new infoL(c.toString(), i1.toString());
        RESULT =i;        
    :}
;

LANZAMIENTO1 ::=
    lanzamiento:c dosPuntos numeroEntero:n1 puntoComa
    {:
        infoL i= new infoL(c.toString(), n1.toString());
        RESULT =i;        
    :}

;

EXTENSION1 ::=
    extension:c dosPuntos IDENTS:e1 puntoComa 
    {:
        infoL i= new infoL(c.toString(), e1.toString());
        RESULT =i;        
    :}
;

// ********************************************** CODIGO FUENTE  ********************************************** 

CF ::= 
    texto
    |error EXPRS1:exprs1
    {:
            String tipo = "Semantico";
            String token =" ";
            int fila =0;
            int columna= 0;
            String otro= "Error en codigo java";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
    :}
;

// ********************************************** EXPRESIONES REGULARES  ********************************************** 
EXPRS1 ::= //cada regla se concatena para que sea un arbol con las posibles expresiones
    EXPRS1 EXPRS:a2
    {://Agregamos el arbol
    if(a2==null){
        //no se agrega el arbol
    }else{
        //agregamos el arbol
                    arbol a =  (arbol)a2;
                    arboles.add(a);
        }            
    :}    
    | EXPRS:a1 //solo devolvemos el valor
    {: 
        if(a1==null){
            //no se agrega el arbol
        }else{
            //agregamos el arbol
                    arbol a =  (arbol)a1;
                    arboles.add(a);
        }                            
    :}    
;

EXPRS ::= 
   ID:id1 igual ERS:ers puntoComa 
    {: 
        if(id1==null){
            RESULT= null;
        }else{
            //por cada expresion se crea un arbol/automata asi se reconoce el tipo de dato que se lee y el nombre del
            
                if(ers==null ){//marcar como error semantico
                    RESULT= null;            
                }else{//aqui se concatena al final con simbolo de aceptacion
                    
                    nodo n11 =  (nodo)ers;
                    nodo n22 =  new nodo();
                    contadorNodoHoja=contadorNodoHoja+1;
                    n22.insertarNodoAceptacion(contadorNodoHoja);
            
                    nodo n = new nodo();
                    n.insertarNodoConcatenacion(n11, n22);

                    //enviamos dato como arbol para analizar y guardar
                    String identificador1 = (String) id1;
                    System.out.println("IDENTIFICADOR "+identificador1);
                    LinkedList<siguientes> listaSiguientes = new LinkedList<>();
                    LinkedList<filaTablaAFD> tablaAutomata = new LinkedList<>();
                    LinkedList<estado> estadosRevisados1 = new LinkedList<>();
                    LinkedList<estado> estadosSinRevisar1 = new LinkedList<>();
                    automataL automata1 = new automataL(estadosRevisados1, estadosSinRevisar1, tablaAutomata);

                    arbol a1= new arbol(n, identificador1, listaSiguientes,automata1);

                    //se analiza el arbol y se crea un automata
                    analisisArbol analisis= new analisisArbol();
                    int contador = 0;
                    analisis.analisisArbol(a1, listaSimbolos,contador);
                    mostrarDatos m = new mostrarDatos();
                    m. mostrarAutomata(a1);

                    //limpiamos lista de simbolos
                    listaSimbolos.clear();
                    contadorNodoHoja=0;
                    RESULT= a1;
                }
        }
    :}    
    | error TNT
    {: 
            String tipo = "Semantico";
            String token = " ";
            int fila =0;
            int columna= 0;
            String otro= "Error en estructura de expresiones regulares";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);
    :}    
;

ID ::= 
    identificador: id1 
    {:
        String identificador1 = (String) id1;
        auxiliarLexico a= new auxiliarLexico();
        boolean encontrado=a.verificarNombreEnLista(listaTokens, identificador1);
            
        //verificacion de ide del token
        if(encontrado==true){ //marcar error pues ya existe

            String tipo = "Semantico";
            String token = id1.toString();
            int fila =id1left;
            int columna= id1right;
            String otro= "Error se repite el identificador ";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

           RESULT= null;
        }else{
            listaTokens.add(id1.toString());
            RESULT = id1.toString();
        }

    :}
    | ignorar: ig1    
    {: 
        RESULT = ig1.toString();
    :}
;

ERS ::=
     ERS:n1 barraO  ER:n2 // aqui se unen nodos con |
    {://creamos el nodo  [ | ] 
            nodo n11 =  (nodo) n1;
            nodo n22 =  (nodo) n2;
            nodo n = new nodo();
            n.insertarNodoO(n11,n22);

            RESULT= n;
    :}    
    | ERS:n1 ER:n2 //aqui se unen nodos con la concatenacion
    {://creamos el nodo  [.] 
            nodo n11 =  (nodo) n1;
            nodo n22 =  (nodo) n2;
            nodo n = new nodo();
            n.insertarNodoConcatenacion(n11,n22);

            RESULT= n;
    :}    
    | ER:er //solo devolvemos nodo
    {:
            RESULT= er;
    :}
;

ER ::=
    EXP:exp SIMBOLOS1:num 
    {://creamos el nodo  [+ * ?] 
            nodo n1 =  (nodo) exp;
            nodo n = new nodo();
            switch(num){
            case 1: 
                n.insertarNodoUnoMas(n1);
                break;
            case 2:
                n.insertarNodoCeroMas(n1);
                break;
            case 3: 
                n.insertarNodoOpcion(n1);
                break;
            }
            RESULT= n;
    :}    
    |EXP:exp //solo devolvemos el nodo
    {: 
            RESULT= exp;
    :}    
;

EXP ::=
    corcheteAbierto ERS:ers corcheteCerrado //devolver nodo
    {:
            RESULT= ers;
    :}
    | parentesisAbierto ERS:ers parentesisCerrado //devolver nodo
    {:
            RESULT= ers;
    :}
    | letras //nodo hoja
    {:
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(2,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(3, caracterV);
        listaSimbolos.add(s);
        RESULT = n;
    :}
    | numeros //nodo hoja
    {:
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(1,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(2, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    :}
    | caracter:c //nodo hoja
    {:
        auxiliar a = new auxiliar();
        String caracterN =a.quitarComillas(c.toString());
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(6,caracterN,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(1, caracterN);
        listaSimbolos.add(s);


        RESULT = n;
    :}
    | nuevaLinea //nodo hoja
    {:
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(3,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(6, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    :}
    | espacioBlanco //nodo hoja
    {:
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(4,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(4, caracterV);
        listaSimbolos.add(s);

       RESULT = n;
    :}
    | tabulador //nodo hoja
    {:
        nodo n = new nodo();
        contadorNodoHoja=contadorNodoHoja+1;
        n.insertarNodohoja(5,caracterV,contadorNodoHoja);

        tablaSimbolos s = new tablaSimbolos();
        s. insertarDato(5, caracterV);
        listaSimbolos.add(s);

        RESULT = n;
    :}
;

SIMBOLOS1 ::= //solo devolvemos numero clave de cada simbolo
     unoOmas:u
    {:
            RESULT=new Integer(1);
    :}
    |muchasVeces :m
    {:
            RESULT=new Integer(2);
    :}

    | opcional:o
    {:
            RESULT=new Integer(3);
    :}
;


// ********************************************** TERMINALES  Y NO TERMINALES ********************************************** 
TNTS ::= 
    TNTS TNT
    | TNT
;

TNT ::=
    TIPOT:t SIMBOLOS:s puntoComa
    {:
        //verificar si terminal esta en tokens
        if(t.toString().equals("terminal")){
            boolean encontrado = verificarIDS();
            if(encontrado==false){
                //error no se encontro un terminal declarado, marcar error semantico
                String tipo = "Semantico";
                String token = " ";
                int fila =0;
                int columna= 0;
                String otro= "Error existen terminales que no se declararon en E.R";
                errores error1 = new errores(tipo, fila, columna, token,otro);
                pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

            }else{
            //todos los terminales se habian declarado en ERS
            }
        }
        //si es no terminal, ya se ha verificado que no se repitan
        else{}
        //limpiar listaDeIds
        listaIds.clear();
    :}
    |error GRAMATICA
{:
            String tipo = "Semantico";
            String token = " ";
            int fila =0;
            int columna= 0;
            String otro= "Error en estructura de gramatica";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

:};

TIPOT ::=
    terminal1:t1
    {:
        RESULT= t1;
    :}
    | noTerminal:t1
    {:
        RESULT= t1;
    :}
;

SIMBOLOS ::=
    IDENTIFICADORES1:i
    {:
        RESULT =i;
    :}    
    |TIPOS IDENTIFICADORES1:i
    {:
        RESULT =i;
    :} 
     
;

IDENTIFICADORES1 ::=
    IDENTIFICADORES1 coma IDENTIFICADOR1:i
    //verificar que no se repita el dato
    {:
        String valor = i.toString();
        boolean encontrado = buscarIdTNT(valor);
        if(encontrado==true){
            String tipo = "Semantico";
            String token = i.toString();
            int fila =ileft;
            int columna= iright;
            String otro= "Error ya se ha declarado ese identificador";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

        //error semantico
            RESULT=null;
        }
        else{
            listaIds.add(i.toString());
            listaIds1.add(i.toString());
            RESULT =1;
        }
    :}
    | IDENTIFICADOR1:i
    //verificar que no se repita el dato
    {:
        String valor = i.toString();
        boolean encontrado = buscarIdTNT(valor);
        if(encontrado==true){
        //error semantico
            String tipo = "Semantico";
            String token = i.toString();
            int fila =ileft;
            int columna= iright;
            String otro= "Error ya se ha declarado ese identificador";
            errores error1 = new errores(tipo, fila, columna, token,otro);
            pantallas.PRINCIPAL.listaErroresGeneral.add(error1);

            RESULT=null;
        }
        else{
            listaIds.add(i.toString());
            listaIds1.add(i.toString());
            RESULT =1;
        }
    :}
;

IDENTIFICADOR1 ::=
    identificador:i 
    {:
        RESULT =i;
    :}
;

TIPOS ::=
    entero
    | real
    | cadena1
;


// ********************************************** GRAMATICA ********************************************** 
GRAMATICAS ::= 
    GRAMATICAS GRAMATICA 
    |GRAMATICA
;
 
GRAMATICA ::=
    identificador dosPuntos dosPuntos S2 puntoComa
;

S2 ::=
    REGLAS 
    |SEMANTICA 
    |REGLAS SEMANTICA 
;

REGLAS ::=
     REGLAS REGLA
    | REGLA
;

REGLA ::=
    identificador
    |identificador dosPuntos identificador 
;

SEMANTICA ::= 
    CF
;



